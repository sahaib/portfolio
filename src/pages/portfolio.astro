---
import { WORK } from '../lib/constants'
import BaseLayout from '../layouts/BaseLayout.astro'
import TopLayout from '../layouts/TopLayout.astro'
import BottomLayout from '../layouts/BottomLayout.astro'
import ProjectCard from '../components/ProjectCard.astro'

import { contentfulClient } from '../lib/contentful'
import { documentToHtmlString } from '@contentful/rich-text-html-renderer'
import type { EntryFieldTypes, EntryCollection } from 'contentful'

// Using a more generic type to avoid TypeScript errors
interface ContentfulEntry {
  sys: {
    id: string;
    createdAt: string;
  };
  fields: {
    name: string;
    website: string;
    description?: string;
    img?: {
      fields: {
        file: {
          url: string;
        };
        title?: string;
      };
    };
  };
}

let entries: { items: ContentfulEntry[] } = { items: [] };
let errorMessage = '';

try {
  // Simple query without the problematic timestamp
  const response = await contentfulClient.getEntries({
    content_type: 'projects',
    order: ['-sys.createdAt']
  });
  
  // Type assertion to handle the response
  entries = response as unknown as { items: ContentfulEntry[] };
  
  // Log success for debugging
  console.log(`Successfully fetched ${entries.items.length} projects from Contentful`);
} catch (error) {
  console.error('Error fetching projects from Contentful:', error);
  errorMessage = 'Unable to load projects at this time. Please try again later.';
  // Entries will remain an empty array
}

// Fallback to hardcoded projects if Contentful fails
const workArray = Array.isArray(WORK) ? WORK : [];
const useHardcodedProjects = entries.items.length === 0 && workArray.length > 0;
---

<BaseLayout
  title="Portfolio"
  description="Projects and some clone's that I did"
>
  <main class="flex min-h-[80vh] flex-auto flex-col" transition:animate="slide">
    <TopLayout>
      <h2
        class="scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight first:mt-0"
      >
        Projects and work
      </h2>
    </TopLayout>
    <BottomLayout size="xl">
      <div class="flex w-full flex-wrap justify-center gap-2">
        {errorMessage && (
          <div class="text-center py-10 w-full">
            <p class="text-lg text-red-500">{errorMessage}</p>
            <p class="text-sm text-muted-foreground mt-2">Please check back later.</p>
          </div>
        )}
        
        {entries.items && entries.items.length > 0 ? (
          entries.items
            .sort(
              (a, b) =>
                new Date(b.sys.createdAt).getTime() -
                new Date(a.sys.createdAt).getTime()
            )
            .map((entry) => (
              <ProjectCard
                key={entry?.sys?.id}
                href={entry?.fields?.website}
                heading={entry?.fields?.name}
                subheading={entry?.fields?.description}
                imagePath={entry?.fields?.img?.fields?.file?.url}
                altText={entry?.fields?.img?.fields?.title}
                class="w-full sm:w-2/5"
              />
            ))
        ) : useHardcodedProjects ? (
          // Fallback to hardcoded projects
          workArray.map((project) => (
            <ProjectCard
              key={project.id}
              href={project.link}
              heading={project.title}
              subheading={project.description}
              imagePath={project.image}
              altText={project.title}
              class="w-full sm:w-2/5"
            />
          ))
        ) : (
          <div class="text-center py-10">
            <p class="text-lg">Projects are loading or temporarily unavailable.</p>
            <p class="text-sm text-muted-foreground mt-2">Please check back later.</p>
          </div>
        )}
      </div>
    </BottomLayout>
  </main>
</BaseLayout>
