---
import { WORK } from '../lib/constants'
import BaseLayout from '../layouts/BaseLayout.astro'
import TopLayout from '../layouts/TopLayout.astro'
import BottomLayout from '../layouts/BottomLayout.astro'
import ProjectCard from '../components/ProjectCard.astro'

import { contentfulClient } from '../lib/contentful'
import { documentToHtmlString } from '@contentful/rich-text-html-renderer'
import type { EntryFieldTypes } from 'contentful'

interface Project {
  contentTypeId: 'projects'
  fields: {
    name: EntryFieldTypes.Text
    img: EntryFieldTypes.AssetLink
    website: EntryFieldTypes.EntryResourceLink<any>
    repositorio: EntryFieldTypes.EntryResourceLink<any>
  }
}

// Explicitly specify content_type to only get projects
const entries = await contentfulClient.getEntries<Project>({
  content_type: 'projects' // This ensures only projects are fetched, not blog posts
}).catch(err => {
  console.error('Contentful Error:', err);
  return { items: [] };
})
---

<BaseLayout
  title="Portfolio"
  description="Projects and some clone's that I did"
>
  <main class="flex min-h-[80vh] flex-auto flex-col" transition:animate="slide">
    <TopLayout>
      <div class="flex items-center justify-between">
        <h2
          class="scroll-m-20 border-b pb-2 text-3xl font-semibold tracking-tight first:mt-0"
        >
          Projects and work
        </h2>
        <a 
          href="/" 
          class="flex items-center text-sm font-medium text-primary transition-colors hover:text-primary/80"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="mr-1 h-4 w-4"
          >
            <path d="m15 18-6-6 6-6"></path>
          </svg>
          Back to Home
        </a>
      </div>
    </TopLayout>
    <BottomLayout size="xl">
      <div class="portfolio-grid grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-7 max-w-7xl mx-auto px-4 sm:px-6">
        {
          entries.items
            .sort(
              (a, b) =>
                new Date(b.sys.createdAt).getTime() -
                new Date(a.sys.createdAt).getTime()
            )
            .map((entry: any, index: number) => (
              <div 
                class="project-card-container opacity-0" 
                style={`animation-delay: ${index * 150}ms;`}
              >
                <ProjectCard
                  key={entry?.sys?.id}
                  href={entry?.fields?.website}
                  heading={entry?.fields?.name}
                  subheading={entry?.fields?.description}
                  imagePath={entry?.fields?.img?.fields?.file.url}
                  altText={entry?.fields?.img?.fields.title}
                  class="h-full"
                />
              </div>
            ))
        }
      </div>
    </BottomLayout>
  </main>
</BaseLayout>

<script>
  // Animate cards on page load
  document.addEventListener('astro:page-load', () => {
    const cards = document.querySelectorAll('.project-card-container');
    
    // Use Intersection Observer to trigger animations when cards come into view
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-in');
          observer.unobserve(entry.target);
        }
      });
    }, { 
      threshold: 0.1,
      rootMargin: '0px 0px -100px 0px'
    });
    
    cards.forEach(card => {
      observer.observe(card);
    });
    
    // Add hover listeners for card interactive effects
    cards.forEach(card => {
      card.addEventListener('mouseenter', () => {
        // Add hover class that we can use for potential effects
        card.classList.add('card-hover');
        
        // Optional: Add subtle hover effect to other cards
        cards.forEach(otherCard => {
          if (otherCard !== card) {
            otherCard.classList.add('card-dim');
          }
        });
      });
      
      card.addEventListener('mouseleave', () => {
        card.classList.remove('card-hover');
        
        // Remove dim effect from other cards
        cards.forEach(otherCard => {
          otherCard.classList.remove('card-dim');
        });
      });
    });
  });
</script>

<style>
  .portfolio-grid {
    padding-bottom: 2rem;
  }
  
  .project-card-container {
    @apply transition-all duration-700;
    transform: translateY(40px);
  }
  
  .animate-in {
    @apply opacity-100;
    transform: translateY(0);
    animation: cardAppear 0.9s cubic-bezier(0.22, 1, 0.36, 1) forwards;
  }
  
  .card-dim {
    opacity: 0.7;
    filter: saturate(0.8) brightness(0.9);
    transition: all 0.4s ease;
  }
  
  @keyframes cardAppear {
    0% {
      opacity: 0;
      transform: translateY(40px) scale(0.95);
    }
    100% {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  @media (prefers-reduced-motion: reduce) {
    .project-card-container,
    .animate-in {
      transition: none !important;
      animation: none !important;
      transform: none !important;
      opacity: 1 !important;
    }
    
    .card-dim {
      opacity: 1 !important;
      filter: none !important;
    }
  }
</style>
