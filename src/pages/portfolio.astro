---
import { WORK } from '../lib/constants'
import BaseLayout from '../layouts/BaseLayout.astro'
import TopLayout from '../layouts/TopLayout.astro'
import BottomLayout from '../layouts/BottomLayout.astro'
import ProjectCard from '../components/ProjectCard.astro'

import { contentfulClient } from '../lib/contentful'
import type { EntryFieldTypes, EntryCollection } from 'contentful'

interface Project {
  contentTypeId: 'projects'
  fields: {
    name: EntryFieldTypes.Text
    img: EntryFieldTypes.AssetLink
    website: EntryFieldTypes.Symbol
    description: EntryFieldTypes.Text
  }
}

let error: string | null = null;
let entries: EntryCollection<Project> = { items: [], total: 0, skip: 0, limit: 0 };

try {
  entries = await contentfulClient.getEntries<Project>({
    content_type: 'projects',
    order: ['-sys.createdAt'],
    select: ['fields.name', 'fields.description', 'fields.img', 'fields.website'],
    limit: 100
  });
} catch (err) {
  console.error('Error fetching projects:', err);
  error = err instanceof Error ? err.message : 'An unknown error occurred';
}

const groupedProjects = entries.items.reduce((acc, project) => {
  const category = 'Featured';
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(project);
  return acc;
}, {});

const categories = {
  'Featured': 'A collection of my notable projects and work',
};
---

<BaseLayout
  title="Portfolio"
  description="A showcase of my projects, tools, and design work"
>
  <main class="flex min-h-[80vh] flex-auto flex-col">
    <TopLayout>
      <div class="flex flex-col space-y-4">
        <div class="flex items-center justify-between">
          <h1 class="scroll-m-20 text-4xl font-bold tracking-tight">
            Portfolio
          </h1>
          <div class="flex items-center gap-4">
            <button 
              id="refreshButton"
              onclick="window.location.reload()"
              class="flex items-center gap-2 text-sm font-medium text-primary transition-colors hover:text-primary/80"
              title="Refresh projects"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="refresh-icon"
              >
                <path d="M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8"></path>
                <path d="M3 3v5h5"></path>
                <path d="M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16"></path>
                <path d="M16 21h5v-5"></path>
              </svg>
              Refresh
            </button>
            <a 
              href="/" 
              class="flex items-center text-sm font-medium text-primary transition-colors hover:text-primary/80"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="mr-1 h-4 w-4"
              >
                <path d="m15 18-6-6 6-6"></path>
              </svg>
              Back to Home
            </a>
          </div>
        </div>
        <p class="text-lg text-muted-foreground">
          A collection of projects that demonstrate my expertise in product management, development, and design.
        </p>
      </div>
    </TopLayout>

    <BottomLayout size="xl">
      <div class="space-y-16 max-w-7xl mx-auto px-4 sm:px-6" id="portfolio-content">
        {
          error ? (
            <div class="flex flex-col items-center justify-center py-20 text-center">
              <div class="text-red-500 mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                </svg>
                <h3 class="text-xl font-semibold mb-2">Error Loading Projects</h3>
                <p class="text-muted-foreground">{error}</p>
              </div>
              <button 
                id="retryButton"
                onclick="window.location.reload()"
                class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
              >
                Try Again
              </button>
            </div>
          ) : entries.items.length === 0 ? (
            <div class="flex flex-col items-center justify-center py-20 text-center">
              <div class="loading-spinner mb-4"></div>
              <p class="text-lg text-muted-foreground">Loading projects...</p>
            </div>
          ) : (
            Object.entries(categories).map(([category, description]) => (
              groupedProjects[category] && groupedProjects[category].length > 0 && (
                <section class="space-y-8">
                  <div class="space-y-2">
                    <h2 class="text-2xl font-semibold tracking-tight">{category}</h2>
                    <p class="text-muted-foreground">{description}</p>
                  </div>
                  
                  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-7">
                    {groupedProjects[category].map((project: any, index: number) => (
                      <div 
                        class="project-card-container opacity-0" 
                        style={`animation-delay: ${index * 150}ms;`}
                      >
                        <ProjectCard
                          key={project?.sys?.id}
                          href={project?.fields?.website}
                          heading={project?.fields?.name}
                          subheading={project?.fields?.description}
                          imagePath={project?.fields?.img?.fields?.file?.url}
                          altText={project?.fields?.img?.fields?.title}
                          class="h-full"
                        />
                      </div>
                    ))}
                  </div>
                </section>
              )
            ))
          )
        }
      </div>
    </BottomLayout>
  </main>
</BaseLayout>

<style>
  .portfolio-grid {
    padding-bottom: 2rem;
  }
  
  .project-card-container {
    @apply transition-all duration-700;
    transform: translateY(40px);
  }
  
  .animate-in {
    @apply opacity-100;
    transform: translateY(0);
    animation: cardAppear 0.9s cubic-bezier(0.22, 1, 0.36, 1) forwards;
  }
  
  .card-dim {
    opacity: 0.7;
    filter: saturate(0.8) brightness(0.9);
    transition: all 0.4s ease;
  }
  
  @keyframes cardAppear {
    0% {
      opacity: 0;
      transform: translateY(40px) scale(0.95);
    }
    100% {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  /* Loading spinner animation */
  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid hsl(var(--primary) / 0.2);
    border-top-color: hsl(var(--primary));
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }
  
  /* Category headers animation */
  section {
    @apply transition-all duration-500;
  }
  
  section:hover h2 {
    @apply text-primary;
    transform: translateX(8px);
    transition: all 0.3s ease;
  }
  
  @media (prefers-reduced-motion: reduce) {
    .project-card-container,
    .animate-in,
    section,
    section:hover h2,
    .loading-spinner {
      transition: none !important;
      animation: none !important;
      transform: none !important;
      opacity: 1 !important;
    }
    
    .card-dim {
      opacity: 1 !important;
      filter: none !important;
    }
  }

  .refresh-icon {
    transition: transform 0.3s ease;
  }

  button:hover .refresh-icon {
    transform: rotate(180deg);
  }
</style>

<script is:inline>
  // Handle refresh button click
  function handleRefresh() {
    window.location.reload();
  }

  // Add event listeners
  function initializeRefreshButtons() {
    const refreshButton = document.getElementById('refreshButton');
    const retryButton = document.getElementById('retryButton');
    
    if (refreshButton) {
      refreshButton.onclick = handleRefresh;
    }
    
    if (retryButton) {
      retryButton.onclick = handleRefresh;
    }
  }

  // Initialize animations
  function initializeAnimations() {
    const cards = document.querySelectorAll('.project-card-container');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-in');
          observer.unobserve(entry.target);
        }
      });
    }, { 
      threshold: 0.1,
      rootMargin: '0px 0px -100px 0px'
    });
    
    cards.forEach(card => {
      observer.observe(card);
      
      // Add hover listeners for card interactive effects
      card.addEventListener('mouseenter', () => {
        card.classList.add('card-hover');
        cards.forEach(otherCard => {
          if (otherCard !== card) {
            otherCard.classList.add('card-dim');
          }
        });
      });
      
      card.addEventListener('mouseleave', () => {
        card.classList.remove('card-hover');
        cards.forEach(otherCard => {
          otherCard.classList.remove('card-dim');
        });
      });
    });
  }

  // Initialize everything when the DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      initializeRefreshButtons();
      initializeAnimations();
    });
  } else {
    initializeRefreshButtons();
    initializeAnimations();
  }
</script>
