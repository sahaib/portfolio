---
import { getBlogPosts } from '../../lib/contentful';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Container from '../../components/Container.astro';
import { documentToHtmlString } from '@contentful/rich-text-html-renderer';
import { BLOCKS, INLINES } from '@contentful/rich-text-types';

export async function getStaticPaths() {
  const blogPostsResponse = await getBlogPosts();
  const blogPosts = blogPostsResponse.items || [];
  
  // If there are no blog posts, return a single path with a dummy slug
  // This ensures the build doesn't fail when no blog posts exist
  if (blogPosts.length === 0) {
    return [
      {
        params: { slug: 'placeholder' },
        props: { post: null }
      }
    ];
  }
  
  return blogPosts.map((post: any) => ({
    params: { slug: post.fields.slug as string },
    props: { post },
  }));
}

interface Props {
  post: any;
}

const { post } = Astro.props;

// If no post is found, redirect to the blog index page
if (!post) {
  return Astro.redirect('/blog');
}

const { title, description, coverImage, content } = post.fields;

// Format date
const formattedDate = new Date(post.sys.createdAt).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

// Configure rich text rendering options with image support
const renderOptions = {
  renderNode: {
    // Handle embedded assets (images)
    [BLOCKS.EMBEDDED_ASSET]: (node: any) => {
      // Get the asset from the linked entries
      const asset = node.data.target;
      
      if (asset && asset.fields) {
        const { file, title, description } = asset.fields;
        const imageUrl = file?.url;
        const imageAlt = title || description || '';
        
        if (imageUrl) {
          return `<div class="my-8">
            <img 
              src="https:${imageUrl}" 
              alt="${imageAlt}" 
              class="mx-auto rounded-lg shadow-md max-h-[500px] w-auto"
            />
            ${description ? `<p class="mt-2 text-center text-sm text-muted-foreground">${description}</p>` : ''}
          </div>`;
        }
      }
      return '';
    },
    // Handle hyperlinks
    [INLINES.HYPERLINK]: (node: any) => {
      const { uri } = node.data;
      const text = node.content[0]?.value || '';
      return `<a href="${uri}" target="_blank" rel="noopener noreferrer" class="text-primary underline">${text}</a>`;
    }
  }
};

// Convert rich text to HTML with the custom options
const contentHtml = content ? documentToHtmlString(content, renderOptions) : '';
---

<BaseLayout title={`${title} | Blog`} description={description}>
  <Container size="xl">
    <article class="mx-auto max-w-3xl py-12">
      <div class="mb-8 text-center">
        <a href="/blog" class="mb-6 inline-flex items-center text-sm font-medium text-primary">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="mr-1 h-4 w-4"
          >
            <path d="m15 18-6-6 6-6"></path>
          </svg>
          Back to all posts
        </a>
        <h1 class="mt-2 text-3xl font-bold tracking-tight text-foreground sm:text-4xl md:text-5xl">{title}</h1>
        <p class="mt-4 text-xl text-muted-foreground">{description}</p>
        <time class="mt-2 block text-sm text-muted-foreground">{formattedDate}</time>
      </div>

      {coverImage && (
        <div class="mb-8 overflow-hidden rounded-lg">
          <img
            src={`https:${coverImage.fields.file.url}`}
            alt={title}
            class="h-auto w-full object-cover"
          />
        </div>
      )}

      <div class="prose prose-lg mx-auto dark:prose-invert">
        <div set:html={contentHtml} />
      </div>
    </article>
  </Container>
</BaseLayout>

<style is:global>
  .prose {
    max-width: 65ch;
    color: var(--color-foreground);
  }
  .prose a {
    color: var(--color-primary);
    text-decoration: underline;
    font-weight: 500;
  }
  .prose strong {
    color: var(--color-foreground);
    font-weight: 600;
  }
  .prose h1, .prose h2, .prose h3, .prose h4, .prose h5, .prose h6 {
    color: var(--color-foreground);
    margin-top: 2em;
    margin-bottom: 1em;
  }
  .prose blockquote {
    border-left: 4px solid var(--color-border);
    padding-left: 1.5rem;
    font-style: italic;
  }
  .prose code {
    color: var(--color-foreground);
    background-color: var(--color-muted);
    padding: 0.2em 0.4em;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }
  .prose pre {
    background-color: var(--color-card);
    border-radius: 0.5rem;
    overflow-x: auto;
    padding: 1rem;
  }
  .prose pre code {
    background-color: transparent;
    padding: 0;
  }
  .prose img {
    border-radius: 0.5rem;
    margin: 2rem auto;
    max-width: 100%;
    height: auto;
  }
  .prose ul, .prose ol {
    padding-left: 1.5rem;
  }
</style> 